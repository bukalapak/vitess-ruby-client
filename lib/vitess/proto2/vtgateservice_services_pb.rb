# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: vtgateservice.proto for package 'vtgateservice'
# Original file comments:
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreedto in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Service definition for vtgateservice.
# This is the main entry point to Vitess.
#

require 'grpc'
require 'vtgateservice_pb'

module Vtgateservice
  module Vitess
    # Vitess is the main service to access a Vitess cluster. It is the API that vtgate
    # exposes to serve all queries.
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'vtgateservice.Vitess'

      # Execute tries to route the query to the right shard.
      # It depends on the query and bind variables to provide enough
      # information in conjonction with the vindexes to route the query.
      # API group: v3
      rpc :Execute, Vtgate::ExecuteRequest, Vtgate::ExecuteResponse
      # ExecuteBatch tries to route the list of queries on the right shards.
      # It depends on the query and bind variables to provide enough
      # information in conjonction with the vindexes to route the query.
      # API group: v3
      rpc :ExecuteBatch, Vtgate::ExecuteBatchRequest, Vtgate::ExecuteBatchResponse
      # StreamExecute executes a streaming query based on shards.
      # It depends on the query and bind variables to provide enough
      # information in conjonction with the vindexes to route the query.
      # Use this method if the query returns a large number of rows.
      # API group: v3
      rpc :StreamExecute, Vtgate::StreamExecuteRequest, stream(Vtgate::StreamExecuteResponse)
      # ExecuteShards executes the query on the specified shards.
      # API group: Custom Sharding
      rpc :ExecuteShards, Vtgate::ExecuteShardsRequest, Vtgate::ExecuteShardsResponse
      # ExecuteKeyspaceIds executes the query based on the specified keyspace ids.
      # API group: Range-based Sharding
      rpc :ExecuteKeyspaceIds, Vtgate::ExecuteKeyspaceIdsRequest, Vtgate::ExecuteKeyspaceIdsResponse
      # ExecuteKeyRanges executes the query based on the specified key ranges.
      # API group: Range-based Sharding
      rpc :ExecuteKeyRanges, Vtgate::ExecuteKeyRangesRequest, Vtgate::ExecuteKeyRangesResponse
      # ExecuteEntityIds executes the query based on the specified external id to keyspace id map.
      # API group: Range-based Sharding
      rpc :ExecuteEntityIds, Vtgate::ExecuteEntityIdsRequest, Vtgate::ExecuteEntityIdsResponse
      # ExecuteBatchShards executes the list of queries on the specified shards.
      # API group: Custom Sharding
      rpc :ExecuteBatchShards, Vtgate::ExecuteBatchShardsRequest, Vtgate::ExecuteBatchShardsResponse
      # ExecuteBatchKeyspaceIds executes the list of queries based on the specified keyspace ids.
      # API group: Range-based Sharding
      rpc :ExecuteBatchKeyspaceIds, Vtgate::ExecuteBatchKeyspaceIdsRequest, Vtgate::ExecuteBatchKeyspaceIdsResponse
      # StreamExecuteShards executes a streaming query based on shards.
      # Use this method if the query returns a large number of rows.
      # API group: Custom Sharding
      rpc :StreamExecuteShards, Vtgate::StreamExecuteShardsRequest, stream(Vtgate::StreamExecuteShardsResponse)
      # StreamExecuteKeyspaceIds executes a streaming query based on keyspace ids.
      # Use this method if the query returns a large number of rows.
      # API group: Range-based Sharding
      rpc :StreamExecuteKeyspaceIds, Vtgate::StreamExecuteKeyspaceIdsRequest, stream(Vtgate::StreamExecuteKeyspaceIdsResponse)
      # StreamExecuteKeyRanges executes a streaming query based on key ranges.
      # Use this method if the query returns a large number of rows.
      # API group: Range-based Sharding
      rpc :StreamExecuteKeyRanges, Vtgate::StreamExecuteKeyRangesRequest, stream(Vtgate::StreamExecuteKeyRangesResponse)
      # Begin a transaction.
      # API group: Transactions
      rpc :Begin, Vtgate::BeginRequest, Vtgate::BeginResponse
      # Commit a transaction.
      # API group: Transactions
      rpc :Commit, Vtgate::CommitRequest, Vtgate::CommitResponse
      # Rollback a transaction.
      # API group: Transactions
      rpc :Rollback, Vtgate::RollbackRequest, Vtgate::RollbackResponse
      # ResolveTransaction resolves a transaction.
      # API group: Transactions
      rpc :ResolveTransaction, Vtgate::ResolveTransactionRequest, Vtgate::ResolveTransactionResponse
      # MessageStream streams messages from a message table.
      rpc :MessageStream, Vtgate::MessageStreamRequest, stream(Query::MessageStreamResponse)
      # MessageAck acks messages for a table.
      rpc :MessageAck, Vtgate::MessageAckRequest, Query::MessageAckResponse
      # MessageAckKeyspaceIds routes Message Acks using the associated
      # keyspace ids.
      rpc :MessageAckKeyspaceIds, Vtgate::MessageAckKeyspaceIdsRequest, Query::MessageAckResponse
      # Split a query into non-overlapping sub queries
      # API group: Map Reduce
      rpc :SplitQuery, Vtgate::SplitQueryRequest, Vtgate::SplitQueryResponse
      # GetSrvKeyspace returns a SrvKeyspace object (as seen by this vtgate).
      # This method is provided as a convenient way for clients to take a
      # look at the sharding configuration for a Keyspace. Looking at the
      # sharding information should not be used for routing queries (as the
      # information may change, use the Execute calls for that).
      # It is convenient for monitoring applications for instance, or if
      # using custom sharding.
      # API group: Topology
      rpc :GetSrvKeyspace, Vtgate::GetSrvKeyspaceRequest, Vtgate::GetSrvKeyspaceResponse
      # UpdateStream asks the server for a stream of StreamEvent objects.
      # API group: Update Stream
      rpc :UpdateStream, Vtgate::UpdateStreamRequest, stream(Vtgate::UpdateStreamResponse)
    end

    Stub = Service.rpc_stub_class
  end
end

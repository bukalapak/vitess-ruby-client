# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: tabletmanagerservice.proto for package 'tabletmanagerservice'
# Original file comments:
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreedto in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This file contains the service definition for making management API
# calls to VtTablet.
#

require 'grpc'
require 'tabletmanagerservice_pb'

module Tabletmanagerservice
  module TabletManager
    # TabletManager is a service definition for tabletmanagerdata.TabletManager.
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'tabletmanagerservice.TabletManager'

      # Ping returns the input payload
      rpc :Ping, Tabletmanagerdata::PingRequest, Tabletmanagerdata::PingResponse
      # Sleep sleeps for the provided duration
      rpc :Sleep, Tabletmanagerdata::SleepRequest, Tabletmanagerdata::SleepResponse
      # ExecuteHook executes the hook remotely
      rpc :ExecuteHook, Tabletmanagerdata::ExecuteHookRequest, Tabletmanagerdata::ExecuteHookResponse
      # GetSchema asks the tablet for its schema
      rpc :GetSchema, Tabletmanagerdata::GetSchemaRequest, Tabletmanagerdata::GetSchemaResponse
      # GetPermissions asks the tablet for its permissions
      rpc :GetPermissions, Tabletmanagerdata::GetPermissionsRequest, Tabletmanagerdata::GetPermissionsResponse
      #
      # Various read-write methods
      #
      #
      rpc :SetReadOnly, Tabletmanagerdata::SetReadOnlyRequest, Tabletmanagerdata::SetReadOnlyResponse
      rpc :SetReadWrite, Tabletmanagerdata::SetReadWriteRequest, Tabletmanagerdata::SetReadWriteResponse
      # ChangeType asks the remote tablet to change its type
      rpc :ChangeType, Tabletmanagerdata::ChangeTypeRequest, Tabletmanagerdata::ChangeTypeResponse
      rpc :RefreshState, Tabletmanagerdata::RefreshStateRequest, Tabletmanagerdata::RefreshStateResponse
      rpc :RunHealthCheck, Tabletmanagerdata::RunHealthCheckRequest, Tabletmanagerdata::RunHealthCheckResponse
      rpc :IgnoreHealthError, Tabletmanagerdata::IgnoreHealthErrorRequest, Tabletmanagerdata::IgnoreHealthErrorResponse
      rpc :ReloadSchema, Tabletmanagerdata::ReloadSchemaRequest, Tabletmanagerdata::ReloadSchemaResponse
      rpc :PreflightSchema, Tabletmanagerdata::PreflightSchemaRequest, Tabletmanagerdata::PreflightSchemaResponse
      rpc :ApplySchema, Tabletmanagerdata::ApplySchemaRequest, Tabletmanagerdata::ApplySchemaResponse
      rpc :ExecuteFetchAsDba, Tabletmanagerdata::ExecuteFetchAsDbaRequest, Tabletmanagerdata::ExecuteFetchAsDbaResponse
      rpc :ExecuteFetchAsAllPrivs, Tabletmanagerdata::ExecuteFetchAsAllPrivsRequest, Tabletmanagerdata::ExecuteFetchAsAllPrivsResponse
      rpc :ExecuteFetchAsApp, Tabletmanagerdata::ExecuteFetchAsAppRequest, Tabletmanagerdata::ExecuteFetchAsAppResponse
      #
      # Replication related methods
      #
      #
      # SlaveStatus returns the current slave status.
      rpc :SlaveStatus, Tabletmanagerdata::SlaveStatusRequest, Tabletmanagerdata::SlaveStatusResponse
      # MasterPosition returns the current master position
      rpc :MasterPosition, Tabletmanagerdata::MasterPositionRequest, Tabletmanagerdata::MasterPositionResponse
      # StopSlave makes mysql stop its replication
      rpc :StopSlave, Tabletmanagerdata::StopSlaveRequest, Tabletmanagerdata::StopSlaveResponse
      # StopSlaveMinimum stops the mysql replication after it reaches
      # the provided minimum point
      rpc :StopSlaveMinimum, Tabletmanagerdata::StopSlaveMinimumRequest, Tabletmanagerdata::StopSlaveMinimumResponse
      # StartSlave starts the mysql replication
      rpc :StartSlave, Tabletmanagerdata::StartSlaveRequest, Tabletmanagerdata::StartSlaveResponse
      # TabletExternallyReparented tells a tablet that its underlying MySQL is
      # currently the master. It is only used in environments (tabletmanagerdata.such as Vitess+MoB)
      # in which MySQL is reparented by some agent external to Vitess, and then
      # that agent simply notifies Vitess.
      #
      # This call is idempotent with respect to a single target tablet.
      # However, the tablet assumes there is a cooling-off period following the
      # initial external reparent from A to B, before this call is repeated on any
      # tablet other than B. This assumption is configurable with the vttablet flag
      # "finalize_external_reparent_timeout".
      #
      # For more information, see the design doc at go/vt-fast-failover.
      rpc :TabletExternallyReparented, Tabletmanagerdata::TabletExternallyReparentedRequest, Tabletmanagerdata::TabletExternallyReparentedResponse
      # TabletExternallyElected is an notification that may be sent in
      # anticipation of potentially later sending TabletExternallyReparented.
      # The tablet can use this extra lead time to prepare to react quickly if
      # TabletExternallyReparented does follow.
      #
      # This call is effectively a no-op if it is not followed by a call to
      # TabletExternallyReparented, so the external agent doing the reparent can
      # still change its mind.
      #
      # The agent does not need to wait for this call or cancel it before calling
      # TabletExternallyReparented if the external reparent operation finishes
      # before TabletExternallyElected returns.
      rpc :TabletExternallyElected, Tabletmanagerdata::TabletExternallyElectedRequest, Tabletmanagerdata::TabletExternallyElectedResponse
      # GetSlaves asks for the list of mysql slaves
      rpc :GetSlaves, Tabletmanagerdata::GetSlavesRequest, Tabletmanagerdata::GetSlavesResponse
      # VReplication API
      rpc :VReplicationExec, Tabletmanagerdata::VReplicationExecRequest, Tabletmanagerdata::VReplicationExecResponse
      rpc :VReplicationWaitForPos, Tabletmanagerdata::VReplicationWaitForPosRequest, Tabletmanagerdata::VReplicationWaitForPosResponse
      #
      # Reparenting related functions
      #
      #
      # ResetReplication makes the target not replicating
      rpc :ResetReplication, Tabletmanagerdata::ResetReplicationRequest, Tabletmanagerdata::ResetReplicationResponse
      # InitMaster initializes the tablet as a master
      rpc :InitMaster, Tabletmanagerdata::InitMasterRequest, Tabletmanagerdata::InitMasterResponse
      # PopulateReparentJournal tells the tablet to add an entry to its
      # reparent journal
      rpc :PopulateReparentJournal, Tabletmanagerdata::PopulateReparentJournalRequest, Tabletmanagerdata::PopulateReparentJournalResponse
      # InitSlave tells the tablet to reparent to the master unconditionnally
      rpc :InitSlave, Tabletmanagerdata::InitSlaveRequest, Tabletmanagerdata::InitSlaveResponse
      # DemoteMaster tells the soon-to-be-former master it's gonna change
      rpc :DemoteMaster, Tabletmanagerdata::DemoteMasterRequest, Tabletmanagerdata::DemoteMasterResponse
      # PromoteSlaveWhenCaughtUp tells the remote tablet to catch up,
      # and then be the master
      rpc :PromoteSlaveWhenCaughtUp, Tabletmanagerdata::PromoteSlaveWhenCaughtUpRequest, Tabletmanagerdata::PromoteSlaveWhenCaughtUpResponse
      # SlaveWasPromoted tells the remote tablet it is now the master
      rpc :SlaveWasPromoted, Tabletmanagerdata::SlaveWasPromotedRequest, Tabletmanagerdata::SlaveWasPromotedResponse
      # SetMaster tells the slave to reparent
      rpc :SetMaster, Tabletmanagerdata::SetMasterRequest, Tabletmanagerdata::SetMasterResponse
      # SlaveWasRestarted tells the remote tablet its master has changed
      rpc :SlaveWasRestarted, Tabletmanagerdata::SlaveWasRestartedRequest, Tabletmanagerdata::SlaveWasRestartedResponse
      # StopReplicationAndGetStatus stops MySQL replication, and returns the
      # replication status
      rpc :StopReplicationAndGetStatus, Tabletmanagerdata::StopReplicationAndGetStatusRequest, Tabletmanagerdata::StopReplicationAndGetStatusResponse
      # PromoteSlave makes the slave the new master
      rpc :PromoteSlave, Tabletmanagerdata::PromoteSlaveRequest, Tabletmanagerdata::PromoteSlaveResponse
      #
      # Backup related methods
      #
      #
      rpc :Backup, Tabletmanagerdata::BackupRequest, stream(Tabletmanagerdata::BackupResponse)
      # RestoreFromBackup deletes all local data and restores it from the latest backup.
      rpc :RestoreFromBackup, Tabletmanagerdata::RestoreFromBackupRequest, stream(Tabletmanagerdata::RestoreFromBackupResponse)
    end

    Stub = Service.rpc_stub_class
  end
  #
  # Various read-only methods
  #
end

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: query.proto

require 'google/protobuf'

require 'topodata_pb'
require 'vtrpc_pb'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_message "query.Target" do
    optional :keyspace, :string, 1
    optional :shard, :string, 2
    optional :tablet_type, :enum, 3, "topodata.TabletType"
    optional :cell, :string, 4
  end
  add_message "query.VTGateCallerID" do
    optional :username, :string, 1
    repeated :groups, :string, 2
  end
  add_message "query.EventToken" do
    optional :timestamp, :int64, 1
    optional :shard, :string, 2
    optional :position, :string, 3
  end
  add_message "query.Value" do
    optional :type, :enum, 1, "query.Type"
    optional :value, :bytes, 2
  end
  add_message "query.BindVariable" do
    optional :type, :enum, 1, "query.Type"
    optional :value, :bytes, 2
    repeated :values, :message, 3, "query.Value"
  end
  add_message "query.BoundQuery" do
    optional :sql, :string, 1
    map :bind_variables, :string, :message, 2, "query.BindVariable"
  end
  add_message "query.ExecuteOptions" do
    optional :include_event_token, :bool, 2
    optional :compare_event_token, :message, 3, "query.EventToken"
    optional :included_fields, :enum, 4, "query.ExecuteOptions.IncludedFields"
    optional :client_found_rows, :bool, 5
    optional :workload, :enum, 6, "query.ExecuteOptions.Workload"
    optional :sql_select_limit, :int64, 8
    optional :transaction_isolation, :enum, 9, "query.ExecuteOptions.TransactionIsolation"
    optional :skip_query_plan_cache, :bool, 10
  end
  add_enum "query.ExecuteOptions.IncludedFields" do
    value :TYPE_AND_NAME, 0
    value :TYPE_ONLY, 1
    value :ALL, 2
  end
  add_enum "query.ExecuteOptions.Workload" do
    value :UNSPECIFIED, 0
    value :OLTP, 1
    value :OLAP, 2
    value :DBA, 3
  end
  add_enum "query.ExecuteOptions.TransactionIsolation" do
    value :DEFAULT, 0
    value :REPEATABLE_READ, 1
    value :READ_COMMITTED, 2
    value :READ_UNCOMMITTED, 3
    value :SERIALIZABLE, 4
  end
  add_message "query.Field" do
    optional :name, :string, 1
    optional :type, :enum, 2, "query.Type"
    optional :table, :string, 3
    optional :org_table, :string, 4
    optional :database, :string, 5
    optional :org_name, :string, 6
    optional :column_length, :uint32, 7
    optional :charset, :uint32, 8
    optional :decimals, :uint32, 9
    optional :flags, :uint32, 10
  end
  add_message "query.Row" do
    repeated :lengths, :sint64, 1
    optional :values, :bytes, 2
  end
  add_message "query.ResultExtras" do
    optional :event_token, :message, 1, "query.EventToken"
    optional :fresher, :bool, 2
  end
  add_message "query.QueryResult" do
    repeated :fields, :message, 1, "query.Field"
    optional :rows_affected, :uint64, 2
    optional :insert_id, :uint64, 3
    repeated :rows, :message, 4, "query.Row"
    optional :extras, :message, 5, "query.ResultExtras"
  end
  add_message "query.QueryWarning" do
    optional :code, :uint32, 1
    optional :message, :string, 2
  end
  add_message "query.StreamEvent" do
    repeated :statements, :message, 1, "query.StreamEvent.Statement"
    optional :event_token, :message, 2, "query.EventToken"
  end
  add_message "query.StreamEvent.Statement" do
    optional :category, :enum, 1, "query.StreamEvent.Statement.Category"
    optional :table_name, :string, 2
    repeated :primary_key_fields, :message, 3, "query.Field"
    repeated :primary_key_values, :message, 4, "query.Row"
    optional :sql, :bytes, 5
  end
  add_enum "query.StreamEvent.Statement.Category" do
    value :Error, 0
    value :DML, 1
    value :DDL, 2
  end
  add_message "query.ExecuteRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :query, :message, 4, "query.BoundQuery"
    optional :transaction_id, :int64, 5
    optional :options, :message, 6, "query.ExecuteOptions"
  end
  add_message "query.ExecuteResponse" do
    optional :result, :message, 1, "query.QueryResult"
  end
  add_message "query.ResultWithError" do
    optional :error, :message, 1, "vtrpc.RPCError"
    optional :result, :message, 2, "query.QueryResult"
  end
  add_message "query.ExecuteBatchRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    repeated :queries, :message, 4, "query.BoundQuery"
    optional :as_transaction, :bool, 5
    optional :transaction_id, :int64, 6
    optional :options, :message, 7, "query.ExecuteOptions"
  end
  add_message "query.ExecuteBatchResponse" do
    repeated :results, :message, 1, "query.QueryResult"
  end
  add_message "query.StreamExecuteRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :query, :message, 4, "query.BoundQuery"
    optional :options, :message, 5, "query.ExecuteOptions"
  end
  add_message "query.StreamExecuteResponse" do
    optional :result, :message, 1, "query.QueryResult"
  end
  add_message "query.BeginRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :options, :message, 4, "query.ExecuteOptions"
  end
  add_message "query.BeginResponse" do
    optional :transaction_id, :int64, 1
  end
  add_message "query.CommitRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :transaction_id, :int64, 4
  end
  add_message "query.CommitResponse" do
  end
  add_message "query.RollbackRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :transaction_id, :int64, 4
  end
  add_message "query.RollbackResponse" do
  end
  add_message "query.PrepareRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :transaction_id, :int64, 4
    optional :dtid, :string, 5
  end
  add_message "query.PrepareResponse" do
  end
  add_message "query.CommitPreparedRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :dtid, :string, 4
  end
  add_message "query.CommitPreparedResponse" do
  end
  add_message "query.RollbackPreparedRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :transaction_id, :int64, 4
    optional :dtid, :string, 5
  end
  add_message "query.RollbackPreparedResponse" do
  end
  add_message "query.CreateTransactionRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :dtid, :string, 4
    repeated :participants, :message, 5, "query.Target"
  end
  add_message "query.CreateTransactionResponse" do
  end
  add_message "query.StartCommitRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :transaction_id, :int64, 4
    optional :dtid, :string, 5
  end
  add_message "query.StartCommitResponse" do
  end
  add_message "query.SetRollbackRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :transaction_id, :int64, 4
    optional :dtid, :string, 5
  end
  add_message "query.SetRollbackResponse" do
  end
  add_message "query.ConcludeTransactionRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :dtid, :string, 4
  end
  add_message "query.ConcludeTransactionResponse" do
  end
  add_message "query.ReadTransactionRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :dtid, :string, 4
  end
  add_message "query.ReadTransactionResponse" do
    optional :metadata, :message, 1, "query.TransactionMetadata"
  end
  add_message "query.BeginExecuteRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :query, :message, 4, "query.BoundQuery"
    optional :options, :message, 5, "query.ExecuteOptions"
  end
  add_message "query.BeginExecuteResponse" do
    optional :error, :message, 1, "vtrpc.RPCError"
    optional :result, :message, 2, "query.QueryResult"
    optional :transaction_id, :int64, 3
  end
  add_message "query.BeginExecuteBatchRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    repeated :queries, :message, 4, "query.BoundQuery"
    optional :as_transaction, :bool, 5
    optional :options, :message, 6, "query.ExecuteOptions"
  end
  add_message "query.BeginExecuteBatchResponse" do
    optional :error, :message, 1, "vtrpc.RPCError"
    repeated :results, :message, 2, "query.QueryResult"
    optional :transaction_id, :int64, 3
  end
  add_message "query.MessageStreamRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :name, :string, 4
  end
  add_message "query.MessageStreamResponse" do
    optional :result, :message, 1, "query.QueryResult"
  end
  add_message "query.MessageAckRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :name, :string, 4
    repeated :ids, :message, 5, "query.Value"
  end
  add_message "query.MessageAckResponse" do
    optional :result, :message, 1, "query.QueryResult"
  end
  add_message "query.SplitQueryRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :query, :message, 4, "query.BoundQuery"
    repeated :split_column, :string, 5
    optional :split_count, :int64, 6
    optional :num_rows_per_query_part, :int64, 8
    optional :algorithm, :enum, 9, "query.SplitQueryRequest.Algorithm"
  end
  add_enum "query.SplitQueryRequest.Algorithm" do
    value :EQUAL_SPLITS, 0
    value :FULL_SCAN, 1
  end
  add_message "query.QuerySplit" do
    optional :query, :message, 1, "query.BoundQuery"
    optional :row_count, :int64, 2
  end
  add_message "query.SplitQueryResponse" do
    repeated :queries, :message, 1, "query.QuerySplit"
  end
  add_message "query.StreamHealthRequest" do
  end
  add_message "query.RealtimeStats" do
    optional :health_error, :string, 1
    optional :seconds_behind_master, :uint32, 2
    optional :binlog_players_count, :int32, 3
    optional :seconds_behind_master_filtered_replication, :int64, 4
    optional :cpu_usage, :double, 5
    optional :qps, :double, 6
  end
  add_message "query.AggregateStats" do
    optional :healthy_tablet_count, :int32, 1
    optional :unhealthy_tablet_count, :int32, 2
    optional :seconds_behind_master_min, :uint32, 3
    optional :seconds_behind_master_max, :uint32, 4
  end
  add_message "query.StreamHealthResponse" do
    optional :target, :message, 1, "query.Target"
    optional :serving, :bool, 2
    optional :tablet_externally_reparented_timestamp, :int64, 3
    optional :realtime_stats, :message, 4, "query.RealtimeStats"
    optional :aggregate_stats, :message, 6, "query.AggregateStats"
    optional :tablet_alias, :message, 5, "topodata.TabletAlias"
  end
  add_message "query.UpdateStreamRequest" do
    optional :effective_caller_id, :message, 1, "vtrpc.CallerID"
    optional :immediate_caller_id, :message, 2, "query.VTGateCallerID"
    optional :target, :message, 3, "query.Target"
    optional :position, :string, 4
    optional :timestamp, :int64, 5
  end
  add_message "query.UpdateStreamResponse" do
    optional :event, :message, 1, "query.StreamEvent"
  end
  add_message "query.TransactionMetadata" do
    optional :dtid, :string, 1
    optional :state, :enum, 2, "query.TransactionState"
    optional :time_created, :int64, 3
    repeated :participants, :message, 4, "query.Target"
  end
  add_enum "query.MySqlFlag" do
    value :EMPTY, 0
    value :NOT_NULL_FLAG, 1
    value :PRI_KEY_FLAG, 2
    value :UNIQUE_KEY_FLAG, 4
    value :MULTIPLE_KEY_FLAG, 8
    value :BLOB_FLAG, 16
    value :UNSIGNED_FLAG, 32
    value :ZEROFILL_FLAG, 64
    value :BINARY_FLAG, 128
    value :ENUM_FLAG, 256
    value :AUTO_INCREMENT_FLAG, 512
    value :TIMESTAMP_FLAG, 1024
    value :SET_FLAG, 2048
    value :NO_DEFAULT_VALUE_FLAG, 4096
    value :ON_UPDATE_NOW_FLAG, 8192
    value :NUM_FLAG, 32768
    value :PART_KEY_FLAG, 16384
    value :GROUP_FLAG, 32768
    value :UNIQUE_FLAG, 65536
    value :BINCMP_FLAG, 131072
  end
  add_enum "query.Flag" do
    value :NONE, 0
    value :ISINTEGRAL, 256
    value :ISUNSIGNED, 512
    value :ISFLOAT, 1024
    value :ISQUOTED, 2048
    value :ISTEXT, 4096
    value :ISBINARY, 8192
  end
  add_enum "query.Type" do
    value :NULL_TYPE, 0
    value :INT8, 257
    value :UINT8, 770
    value :INT16, 259
    value :UINT16, 772
    value :INT24, 261
    value :UINT24, 774
    value :INT32, 263
    value :UINT32, 776
    value :INT64, 265
    value :UINT64, 778
    value :FLOAT32, 1035
    value :FLOAT64, 1036
    value :TIMESTAMP, 2061
    value :DATE, 2062
    value :TIME, 2063
    value :DATETIME, 2064
    value :YEAR, 785
    value :DECIMAL, 18
    value :TEXT, 6163
    value :BLOB, 10260
    value :VARCHAR, 6165
    value :VARBINARY, 10262
    value :CHAR, 6167
    value :BINARY, 10264
    value :BIT, 2073
    value :ENUM, 2074
    value :SET, 2075
    value :TUPLE, 28
    value :GEOMETRY, 2077
    value :JSON, 2078
    value :EXPRESSION, 31
  end
  add_enum "query.TransactionState" do
    value :UNKNOWN, 0
    value :PREPARE, 1
    value :COMMIT, 2
    value :ROLLBACK, 3
  end
end

module Query
  Target = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.Target").msgclass
  VTGateCallerID = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.VTGateCallerID").msgclass
  EventToken = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.EventToken").msgclass
  Value = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.Value").msgclass
  BindVariable = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.BindVariable").msgclass
  BoundQuery = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.BoundQuery").msgclass
  ExecuteOptions = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ExecuteOptions").msgclass
  ExecuteOptions::IncludedFields = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ExecuteOptions.IncludedFields").enummodule
  ExecuteOptions::Workload = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ExecuteOptions.Workload").enummodule
  ExecuteOptions::TransactionIsolation = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ExecuteOptions.TransactionIsolation").enummodule
  Field = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.Field").msgclass
  Row = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.Row").msgclass
  ResultExtras = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ResultExtras").msgclass
  QueryResult = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.QueryResult").msgclass
  QueryWarning = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.QueryWarning").msgclass
  StreamEvent = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.StreamEvent").msgclass
  StreamEvent::Statement = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.StreamEvent.Statement").msgclass
  StreamEvent::Statement::Category = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.StreamEvent.Statement.Category").enummodule
  ExecuteRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ExecuteRequest").msgclass
  ExecuteResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ExecuteResponse").msgclass
  ResultWithError = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ResultWithError").msgclass
  ExecuteBatchRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ExecuteBatchRequest").msgclass
  ExecuteBatchResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ExecuteBatchResponse").msgclass
  StreamExecuteRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.StreamExecuteRequest").msgclass
  StreamExecuteResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.StreamExecuteResponse").msgclass
  BeginRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.BeginRequest").msgclass
  BeginResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.BeginResponse").msgclass
  CommitRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.CommitRequest").msgclass
  CommitResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.CommitResponse").msgclass
  RollbackRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.RollbackRequest").msgclass
  RollbackResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.RollbackResponse").msgclass
  PrepareRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.PrepareRequest").msgclass
  PrepareResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.PrepareResponse").msgclass
  CommitPreparedRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.CommitPreparedRequest").msgclass
  CommitPreparedResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.CommitPreparedResponse").msgclass
  RollbackPreparedRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.RollbackPreparedRequest").msgclass
  RollbackPreparedResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.RollbackPreparedResponse").msgclass
  CreateTransactionRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.CreateTransactionRequest").msgclass
  CreateTransactionResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.CreateTransactionResponse").msgclass
  StartCommitRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.StartCommitRequest").msgclass
  StartCommitResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.StartCommitResponse").msgclass
  SetRollbackRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.SetRollbackRequest").msgclass
  SetRollbackResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.SetRollbackResponse").msgclass
  ConcludeTransactionRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ConcludeTransactionRequest").msgclass
  ConcludeTransactionResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ConcludeTransactionResponse").msgclass
  ReadTransactionRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ReadTransactionRequest").msgclass
  ReadTransactionResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.ReadTransactionResponse").msgclass
  BeginExecuteRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.BeginExecuteRequest").msgclass
  BeginExecuteResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.BeginExecuteResponse").msgclass
  BeginExecuteBatchRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.BeginExecuteBatchRequest").msgclass
  BeginExecuteBatchResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.BeginExecuteBatchResponse").msgclass
  MessageStreamRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.MessageStreamRequest").msgclass
  MessageStreamResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.MessageStreamResponse").msgclass
  MessageAckRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.MessageAckRequest").msgclass
  MessageAckResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.MessageAckResponse").msgclass
  SplitQueryRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.SplitQueryRequest").msgclass
  SplitQueryRequest::Algorithm = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.SplitQueryRequest.Algorithm").enummodule
  QuerySplit = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.QuerySplit").msgclass
  SplitQueryResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.SplitQueryResponse").msgclass
  StreamHealthRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.StreamHealthRequest").msgclass
  RealtimeStats = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.RealtimeStats").msgclass
  AggregateStats = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.AggregateStats").msgclass
  StreamHealthResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.StreamHealthResponse").msgclass
  UpdateStreamRequest = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.UpdateStreamRequest").msgclass
  UpdateStreamResponse = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.UpdateStreamResponse").msgclass
  TransactionMetadata = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.TransactionMetadata").msgclass
  MySqlFlag = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.MySqlFlag").enummodule
  Flag = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.Flag").enummodule
  Type = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.Type").enummodule
  TransactionState = Google::Protobuf::DescriptorPool.generated_pool.lookup("query.TransactionState").enummodule
end
